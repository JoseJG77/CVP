/**
 * Minified by jsDelivr using Terser v5.39.0.
 * Original file: /npm/sweetalert2@11.21.0/src/buttons-handlers.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{handleAwaitingPromise}from"./instanceMethods/close.js";import privateProps from"./privateProps.js";import{showLoading}from"./staticMethods/showLoading.js";import{DismissReason}from"./utils/DismissReason.js";import{isVisible}from"./utils/dom/domUtils.js";import{getDenyButton,getValidationMessage}from"./utils/dom/getters.js";import{getInputValue}from"./utils/dom/inputUtils.js";import{asPromise,capitalizeFirstLetter,error}from"./utils/utils.js";export const handleConfirmButtonClick=e=>{const i=privateProps.innerParams.get(e);e.disableButtons(),i.input?handleConfirmOrDenyWithInput(e,"confirm"):confirm(e,!0)};export const handleDenyButtonClick=e=>{const i=privateProps.innerParams.get(e);e.disableButtons(),i.returnInputValueOnDeny?handleConfirmOrDenyWithInput(e,"deny"):deny(e,!1)};export const handleCancelButtonClick=(e,i)=>{e.disableButtons(),i(DismissReason.cancel)};const handleConfirmOrDenyWithInput=(e,i)=>{const t=privateProps.innerParams.get(e);if(!t.input)return void error(`The "input" parameter is needed to be set when using returnInputValueOn${capitalizeFirstLetter(i)}`);const s=e.getInput(),n=getInputValue(e,t);t.inputValidator?handleInputValidator(e,n,i):s&&!s.checkValidity()?(e.enableButtons(),e.showValidationMessage(t.validationMessage||s.validationMessage)):"deny"===i?deny(e,n):confirm(e,n)},handleInputValidator=(e,i,t)=>{const s=privateProps.innerParams.get(e);e.disableInput();Promise.resolve().then((()=>asPromise(s.inputValidator(i,s.validationMessage)))).then((s=>{e.enableButtons(),e.enableInput(),s?e.showValidationMessage(s):"deny"===t?deny(e,i):confirm(e,i)}))},deny=(e,i)=>{const t=privateProps.innerParams.get(e||this);if(t.showLoaderOnDeny&&showLoading(getDenyButton()),t.preDeny){e.isAwaitingPromise=!0;Promise.resolve().then((()=>asPromise(t.preDeny(i,t.validationMessage)))).then((t=>{!1===t?(e.hideLoading(),handleAwaitingPromise(e)):e.close({isDenied:!0,value:void 0===t?i:t})})).catch((i=>rejectWith(e||this,i)))}else e.close({isDenied:!0,value:i})},succeedWith=(e,i)=>{e.close({isConfirmed:!0,value:i})},rejectWith=(e,i)=>{e.rejectPromise(i)},confirm=(e,i)=>{const t=privateProps.innerParams.get(e||this);if(t.showLoaderOnConfirm&&showLoading(),t.preConfirm){e.resetValidationMessage(),e.isAwaitingPromise=!0;Promise.resolve().then((()=>asPromise(t.preConfirm(i,t.validationMessage)))).then((t=>{isVisible(getValidationMessage())||!1===t?(e.hideLoading(),handleAwaitingPromise(e)):succeedWith(e,void 0===t?i:t)})).catch((i=>rejectWith(e||this,i)))}else succeedWith(e,i)};
//# sourceMappingURL=/sm/044220a4eabf5e7684db35c68af5f303770b29682e2b16950aa06780972f4a79.map